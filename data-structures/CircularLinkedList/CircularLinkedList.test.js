/*
 * @Author: xiaohuolong
 * @Date: 2020-06-21 09:16:14
 * @LastEditors: xiaohuolong
 * @LastEditTime: 2020-06-21 18:58:29
 * @FilePath: /js-demo/data-structures/CircularLinkedList/CircularLinkedList.test.js
 */ 

const { CircularLinkedList } = require('./CircularLinkedList')
const { expect } = require('chai')

describe('循环链表', () => {
    it('检查空循环链表', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.toString()).to.equal('')
        expect(circularLinkedList.toArray()).to.eql([])
    })

    it('检查尾部插入节点', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.append(1)).to.equal(1)
        expect(circularLinkedList.append(2)).to.equal(2)
        expect(circularLinkedList.append(3)).to.equal(3)
        expect(circularLinkedList.append(4)).to.equal(4)
        expect(circularLinkedList.head).to.eql(circularLinkedList.rear.next)
        expect(circularLinkedList.rear.next.data).to.equal(1)
        expect(circularLinkedList.head.data).to.equal(1)
        expect(circularLinkedList.rear.next.next.data).to.equal(2)
        expect(circularLinkedList.rear.next.next.next.data).to.equal(3)
        expect(circularLinkedList.rear.next.next.next.next.data).to.equal(4)
        expect(circularLinkedList.rear.next.next.next.next).to.eql(circularLinkedList.rear)
    })

    it('检查头部插入节点', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.prepend(1)).to.equal(1)
        expect(circularLinkedList.prepend(2)).to.equal(2)
        expect(circularLinkedList.prepend(3)).to.equal(3)
        expect(circularLinkedList.prepend(4)).to.equal(4)
        expect(circularLinkedList.head).to.eql(circularLinkedList.rear.next)
        expect(circularLinkedList.rear.next.data).to.equal(4)
        expect(circularLinkedList.head.data).to.equal(4)
        expect(circularLinkedList.rear.next.next.data).to.equal(3)
        expect(circularLinkedList.rear.next.next.next.data).to.equal(2)
        expect(circularLinkedList.rear.next.next.next.next.data).to.equal(1)
        expect(circularLinkedList.rear.next.next.next.next).to.eql(circularLinkedList.rear)
    })

    it('检查插入指定节点', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.append(1)).to.equal(1)
        expect(circularLinkedList.toString()).to.equal('1')
        expect(circularLinkedList.add(1,2)).to.equal(2)
        expect(circularLinkedList.toString()).to.equal('1,2')
        expect(circularLinkedList.add(2,3)).to.equal(3)
        expect(circularLinkedList.toString()).to.equal('1,2,3')
        expect(circularLinkedList.add(3, 4)).to.equal(4)
        expect(circularLinkedList.toString()).to.equal('1,2,3,4')
    })

    it('遍历', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.traverse()).to.eql([])
        expect(circularLinkedList.reverseTraversal()).to.eql([])
        expect(circularLinkedList.append(1)).to.equal(1)
        expect(circularLinkedList.append(2)).to.equal(2)
        expect(circularLinkedList.append(3)).to.equal(3)
        expect(circularLinkedList.append(4)).to.equal(4)
        expect(circularLinkedList.append(5)).to.equal(5)
        expect(circularLinkedList.traverse((data) => data)).to.eql([1,2,3,4,5])
        expect(circularLinkedList.reverseTraversal((data) => data)).to.eql([5,4,3,2,1])
    })


    it('查找', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.traverse()).to.eql([])
        expect(circularLinkedList.reverseTraversal()).to.eql([])
        expect(circularLinkedList.contains(1)).to.equal(null)
        expect(circularLinkedList.append(1)).to.equal(1)
        expect(circularLinkedList.contains(1).data).to.equal(1)
        expect(circularLinkedList.contains(2)).to.equal(null)
        expect(circularLinkedList.append(2)).to.equal(2)
        expect(circularLinkedList.contains(2).data).to.equal(2)
        expect(circularLinkedList.append(3)).to.equal(3)
        expect(circularLinkedList.contains(3).data).to.equal(3)
        expect(circularLinkedList.append(4)).to.equal(4)
        expect(circularLinkedList.contains(4).data).to.equal(4)
        expect(circularLinkedList.append(5)).to.equal(5)
        expect(circularLinkedList.contains(1).data).to.equal(1)
        expect(circularLinkedList.contains(5).data).to.equal(5)
    })

    it('翻转', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.append(1)).to.equal(1)
        expect(circularLinkedList.toArray()).to.eql([1])
        circularLinkedList.reverse()
        expect(circularLinkedList.toArray()).to.eql([1])
        circularLinkedList.reverse()
        expect(circularLinkedList.append(2)).to.equal(2)
        expect(circularLinkedList.toArray()).to.eql([1,2])
        circularLinkedList.reverse()
        expect(circularLinkedList.toArray()).to.eql([2,1])
        circularLinkedList.reverse()
        expect(circularLinkedList.append(3)).to.equal(3)
        expect(circularLinkedList.toArray()).to.eql([1,2,3])
        circularLinkedList.reverse()
        expect(circularLinkedList.toArray()).to.eql([3,2,1])
        circularLinkedList.reverse()
        expect(circularLinkedList.append(4)).to.equal(4)
        expect(circularLinkedList.toArray()).to.eql([1,2,3,4])
        circularLinkedList.reverse()
        expect(circularLinkedList.toArray()).to.eql([4,3,2,1])
        circularLinkedList.reverse()
        expect(circularLinkedList.append(5)).to.equal(5)
        circularLinkedList.reverse()
        expect(circularLinkedList.head.data).to.equal(5)
        expect(circularLinkedList.rear.data).to.equal(1)
        expect(circularLinkedList.toArray()).to.eql([5,4,3,2,1])
        expect(circularLinkedList.traverse((data) => data)).to.eql([5,4,3,2,1])
        circularLinkedList.reverse()
        expect(circularLinkedList.head.data).to.equal(1)
        expect(circularLinkedList.rear.data).to.equal(5)
        expect(circularLinkedList.traverse((data) => data)).to.eql([1,2,3,4,5])
        expect(circularLinkedList.toArray()).to.eql([1,2,3,4,5])
    })

    it('查找中间节点', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.findMid()).to.eql(null)
        expect(circularLinkedList.traverse()).to.eql([])
        expect(circularLinkedList.reverseTraversal()).to.eql([])
        expect(circularLinkedList.findMid()).to.eql(null)
        expect(circularLinkedList.append(1)).to.equal(1)
        expect(circularLinkedList.findMid().data).to.eql(1)
        expect(circularLinkedList.append(2)).to.equal(2)
        expect(circularLinkedList.findMid().data).to.eql(1)
        expect(circularLinkedList.append(3)).to.equal(3)
        expect(circularLinkedList.findMid().data).to.eql(2)
        expect(circularLinkedList.append(4)).to.equal(4)
        expect(circularLinkedList.findMid().data).to.eql(2)
        expect(circularLinkedList.append(5)).to.equal(5)
        expect(circularLinkedList.findMid().data).to.eql(3)
        expect(circularLinkedList.append(6)).to.equal(6)
        expect(circularLinkedList.findMid().data).to.eql(3)
    })

    it('检查删除头部', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.prepend(1)).to.equal(1)
        expect(circularLinkedList.prepend(2)).to.equal(2)
        expect(circularLinkedList.prepend(3)).to.equal(3)
        expect(circularLinkedList.prepend(4)).to.equal(4)
        expect(circularLinkedList.prepend(1)).to.equal(1)
        expect(circularLinkedList.prepend(5)).to.equal(5)
        expect(circularLinkedList.rear.data).to.equal(1)
        expect(circularLinkedList.toString()).to.equal('5,1,4,3,2,1')
        expect(circularLinkedList.remove(3)).to.equal(3)
        expect(circularLinkedList.toString()).to.equal('5,1,4,2,1')
        expect(circularLinkedList.removeHead()).to.equal(5)
        expect(circularLinkedList.rear.data).to.equal(1)
        expect(circularLinkedList.head.data).to.equal(1)
        expect(circularLinkedList.toString()).to.equal('1,4,2,1')
        expect(circularLinkedList.removeHead()).to.equal(1)
        expect(circularLinkedList.rear.data).to.equal(1)
        expect(circularLinkedList.head.data).to.equal(4)
        expect(circularLinkedList.toString()).to.equal('4,2,1')
        expect(circularLinkedList.remove(1)).to.equal(1)
        expect(circularLinkedList.toString()).to.equal('4,2')
        expect(circularLinkedList.rear.data).to.equal(2)
        expect(circularLinkedList.head.data).to.equal(4)
        expect(circularLinkedList.removeHead()).to.equal(4)
        expect(circularLinkedList.head.data).to.equal(2)
        expect(circularLinkedList.rear.data).to.equal(2)
        expect(circularLinkedList.removeHead()).to.equal(2)
        expect(circularLinkedList.rear).to.equal(null)
    })

    it('检查删除尾部', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.prepend(1)).to.equal(1)
        expect(circularLinkedList.prepend(2)).to.equal(2)
        expect(circularLinkedList.prepend(3)).to.equal(3)
        expect(circularLinkedList.prepend(4)).to.equal(4)
        expect(circularLinkedList.prepend(1)).to.equal(1)
        expect(circularLinkedList.prepend(5)).to.equal(5)
        expect(circularLinkedList.toString()).to.equal('5,1,4,3,2,1')
        expect(circularLinkedList.remove(3)).to.equal(3)
        expect(circularLinkedList.removeRear()).to.equal(1)
        expect(circularLinkedList.rear.data).to.equal(2)
        expect(circularLinkedList.head.data).to.equal(5)
        expect(circularLinkedList.toString()).to.equal('5,1,4,2')
        expect(circularLinkedList.removeRear()).to.equal(2)
        expect(circularLinkedList.rear.data).to.equal(4)
        expect(circularLinkedList.head.data).to.equal(5)
        expect(circularLinkedList.toString()).to.equal('5,1,4')
        expect(circularLinkedList.remove(1)).to.equal(1)
        expect(circularLinkedList.toString()).to.equal('5,4')
        expect(circularLinkedList.rear.data).to.equal(4)
        expect(circularLinkedList.head.data).to.equal(5)
        expect(circularLinkedList.removeRear()).to.equal(4)
        expect(circularLinkedList.head.data).to.equal(5)
        expect(circularLinkedList.rear.data).to.equal(5)
        expect(circularLinkedList.removeRear()).to.equal(5)
        expect(circularLinkedList.rear).to.equal(null)
    })

    it('检查删除指定元素', () => {
        const circularLinkedList = new CircularLinkedList()
        expect(circularLinkedList.prepend(1)).to.equal(1)
        expect(circularLinkedList.prepend(2)).to.equal(2)
        expect(circularLinkedList.prepend(3)).to.equal(3)
        expect(circularLinkedList.prepend(4)).to.equal(4)
        expect(circularLinkedList.prepend(5)).to.equal(5)
        expect(circularLinkedList.toString()).to.equal('5,4,3,2,1')
        expect(circularLinkedList.remove(3)).to.equal(3)
        expect(circularLinkedList.head.data).to.equal(5)
        expect(circularLinkedList.rear.data).to.equal(1)
        expect(circularLinkedList.toString()).to.equal('5,4,2,1')
        expect(circularLinkedList.remove(5)).to.equal(5)
        expect(circularLinkedList.head.data).to.equal(4)
        expect(circularLinkedList.rear.data).to.equal(1)
        expect(circularLinkedList.toString()).to.equal('4,2,1')
        expect(circularLinkedList.remove(1)).to.equal(1)
        expect(circularLinkedList.head.data).to.equal(4)
        expect(circularLinkedList.rear.data).to.equal(2)
        expect(circularLinkedList.toString()).to.equal('4,2')
        expect(circularLinkedList.add(4, 3)).to.equal(3)
        expect(circularLinkedList.toString()).to.equal('4,3,2')
        expect(circularLinkedList.remove(3)).to.equal(3)
        expect(circularLinkedList.head.data).to.equal(4)
        expect(circularLinkedList.rear.data).to.equal(2)
        expect(circularLinkedList.toString()).to.equal('4,2')
        expect(circularLinkedList.remove(4)).to.equal(4)
        expect(circularLinkedList.head.data).to.equal(2)
        expect(circularLinkedList.rear.data).to.equal(2)
        expect(circularLinkedList.remove(2)).to.equal(2)
        expect(circularLinkedList.rear).to.equal(null)
        expect(circularLinkedList.toString()).to.equal('')
    })

})
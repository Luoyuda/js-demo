/*
 * @Author: xiaohuolong
 * @Date: 2020-06-20 18:40:27
 * @LastEditors: xiaohuolong
 * @LastEditTime: 2020-06-22 17:11:06
 * @FilePath: /js-demo/data-structures/CircularDoublyLinkList/CircularDoublyLinkList.test.js
 */ 

const { CircularDoublyLinkList } = require('./CircularDoublyLinkList')
const { expect } = require('chai')

describe('双向循环链表', () => {
    it('检查空链表', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.toString()).to.equal('')
        expect(circularDoublyLinkList.toArray()).to.eql([])
    })

    it('检查尾部插入节点', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.append(1)).to.equal(1)
        expect(circularDoublyLinkList.head).to.eql(circularDoublyLinkList.rear.next)
        expect(circularDoublyLinkList.append(2)).to.equal(2)
        expect(circularDoublyLinkList.append(3)).to.equal(3)
        expect(circularDoublyLinkList.append(4)).to.equal(4)
        expect(circularDoublyLinkList.head).to.eql(circularDoublyLinkList.rear.next)
        expect(circularDoublyLinkList.head.prev).to.eql(circularDoublyLinkList.rear)
        expect(circularDoublyLinkList.rear.next.data).to.equal(1)
        expect(circularDoublyLinkList.head.data).to.equal(1)
        expect(circularDoublyLinkList.rear.next.next.data).to.equal(2)
        expect(circularDoublyLinkList.rear.next.next.next.data).to.equal(3)
        expect(circularDoublyLinkList.rear.next.next.next.next.data).to.equal(4)
        expect(circularDoublyLinkList.rear.next.next.next.next).to.eql(circularDoublyLinkList.rear)
        expect(circularDoublyLinkList.toString()).to.equal('1,2,3,4')
    })

    it('检查头部插入节点', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.prepend(1)).to.equal(1)
        expect(circularDoublyLinkList.prepend(2)).to.equal(2)
        expect(circularDoublyLinkList.prepend(3)).to.equal(3)
        expect(circularDoublyLinkList.prepend(4)).to.equal(4)
        expect(circularDoublyLinkList.toString()).to.equal('4,3,2,1')
    })

    it('检查插入指定节点', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.append(1)).to.equal(1)
        expect(circularDoublyLinkList.toString()).to.equal('1')
        expect(circularDoublyLinkList.add(1,4)).to.equal(4)
        expect(circularDoublyLinkList.toString()).to.equal('1,4')
        expect(circularDoublyLinkList.add(1, 3)).to.equal(3)
        expect(circularDoublyLinkList.toString()).to.equal('1,3,4')
        expect(circularDoublyLinkList.add(1, 2)).to.equal(2)
        expect(circularDoublyLinkList.toString()).to.equal('1,2,3,4')
        expect(circularDoublyLinkList.reverseTraversal((data) => data)).to.eql([4,3,2,1])
        expect(circularDoublyLinkList.toString()).to.equal('1,2,3,4')
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.reverseTraversal((data) => data)).to.eql([1,2,3,4])

    })

    it('遍历', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.traverse()).to.eql([])
        expect(circularDoublyLinkList.reverseTraversal()).to.eql([])
        expect(circularDoublyLinkList.append(1)).to.equal(1)
        expect(circularDoublyLinkList.append(2)).to.equal(2)
        expect(circularDoublyLinkList.append(3)).to.equal(3)
        expect(circularDoublyLinkList.append(4)).to.equal(4)
        expect(circularDoublyLinkList.append(5)).to.equal(5)
        expect(circularDoublyLinkList.traverse((data) => data)).to.eql([1,2,3,4,5])
        expect(circularDoublyLinkList.reverseTraversal((data) => data)).to.eql([5,4,3,2,1])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.traverse((data) => data)).to.eql([5,4,3,2,1])
        expect(circularDoublyLinkList.reverseTraversal((data) => data)).to.eql([1,2,3,4,5])
    })

    it('查找', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.traverse()).to.eql([])
        expect(circularDoublyLinkList.reverseTraversal()).to.eql([])
        expect(circularDoublyLinkList.contains(1)).to.equal(null)
        expect(circularDoublyLinkList.append(1)).to.equal(1)
        expect(circularDoublyLinkList.contains(1).data).to.equal(1)
        expect(circularDoublyLinkList.contains(2)).to.equal(null)
        expect(circularDoublyLinkList.append(2)).to.equal(2)
        expect(circularDoublyLinkList.contains(2).data).to.equal(2)
        expect(circularDoublyLinkList.append(3)).to.equal(3)
        expect(circularDoublyLinkList.contains(3).data).to.equal(3)
        expect(circularDoublyLinkList.append(4)).to.equal(4)
        expect(circularDoublyLinkList.contains(4).data).to.equal(4)
        expect(circularDoublyLinkList.append(5)).to.equal(5)
        expect(circularDoublyLinkList.contains(1).data).to.equal(1)
        expect(circularDoublyLinkList.contains(5).data).to.equal(5)
    })

    it('翻转', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.append(1)).to.equal(1)
        expect(circularDoublyLinkList.toArray()).to.eql([1])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.toArray()).to.eql([1])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.append(2)).to.equal(2)
        expect(circularDoublyLinkList.toArray()).to.eql([1,2])
        expect(circularDoublyLinkList.rear.next).to.equal(circularDoublyLinkList.head)
        expect(circularDoublyLinkList.head.prev).to.equal(circularDoublyLinkList.rear)
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.toArray()).to.eql([2,1])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.append(3)).to.equal(3)
        expect(circularDoublyLinkList.toArray()).to.eql([1,2,3])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.rear.prev.data).to.equal(2)
        expect(circularDoublyLinkList.rear.next).to.equal(circularDoublyLinkList.head)
        expect(circularDoublyLinkList.head.prev).to.equal(circularDoublyLinkList.rear)
        expect(circularDoublyLinkList.toArray()).to.eql([3,2,1])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.append(4)).to.equal(4)
        expect(circularDoublyLinkList.toArray()).to.eql([1,2,3,4])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.toArray()).to.eql([4,3,2,1])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.append(5)).to.equal(5)
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.head.data).to.equal(5)
        expect(circularDoublyLinkList.rear.data).to.equal(1)
        expect(circularDoublyLinkList.toArray()).to.eql([5,4,3,2,1])
        expect(circularDoublyLinkList.traverse((data) => data)).to.eql([5,4,3,2,1])
        circularDoublyLinkList.reverse()
        expect(circularDoublyLinkList.head.data).to.equal(1)
        expect(circularDoublyLinkList.rear.data).to.equal(5)
        expect(circularDoublyLinkList.traverse((data) => data)).to.eql([1,2,3,4,5])
        expect(circularDoublyLinkList.rear.next).to.equal(circularDoublyLinkList.head)
        expect(circularDoublyLinkList.head.prev).to.equal(circularDoublyLinkList.rear)
        expect(circularDoublyLinkList.toArray()).to.eql([1,2,3,4,5])
    })

    it('查找中间节点', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.findMid()).to.eql(null)
        expect(circularDoublyLinkList.traverse()).to.eql([])
        expect(circularDoublyLinkList.reverseTraversal()).to.eql([])
        expect(circularDoublyLinkList.findMid()).to.eql(null)
        expect(circularDoublyLinkList.append(1)).to.equal(1)
        expect(circularDoublyLinkList.findMid().data).to.eql(1)
        expect(circularDoublyLinkList.append(2)).to.equal(2)
        expect(circularDoublyLinkList.findMid().data).to.eql(1)
        expect(circularDoublyLinkList.append(3)).to.equal(3)
        expect(circularDoublyLinkList.findMid().data).to.eql(2)
        expect(circularDoublyLinkList.append(4)).to.equal(4)
        expect(circularDoublyLinkList.findMid().data).to.eql(2)
        expect(circularDoublyLinkList.append(5)).to.equal(5)
        expect(circularDoublyLinkList.findMid().data).to.eql(3)
        expect(circularDoublyLinkList.append(6)).to.equal(6)
        expect(circularDoublyLinkList.findMid().data).to.eql(3)
    })

    it('检查删除头部', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.removeHead()).to.equal(null)
        expect(circularDoublyLinkList.prepend(1)).to.equal(1)
        expect(circularDoublyLinkList.prepend(2)).to.equal(2)
        expect(circularDoublyLinkList.prepend(3)).to.equal(3)
        expect(circularDoublyLinkList.prepend(4)).to.equal(4)
        expect(circularDoublyLinkList.prepend(1)).to.equal(1)
        expect(circularDoublyLinkList.prepend(5)).to.equal(5)
        expect(circularDoublyLinkList.rear.data).to.equal(1)
        expect(circularDoublyLinkList.toString()).to.equal('5,1,4,3,2,1')
        expect(circularDoublyLinkList.remove(3)).to.equal(3)
        expect(circularDoublyLinkList.toString()).to.equal('5,1,4,2,1')
        expect(circularDoublyLinkList.removeHead()).to.equal(5)
        expect(circularDoublyLinkList.rear.data).to.equal(1)
        expect(circularDoublyLinkList.head.data).to.equal(1)
        expect(circularDoublyLinkList.toString()).to.equal('1,4,2,1')
        expect(circularDoublyLinkList.removeHead()).to.equal(1)
        expect(circularDoublyLinkList.rear.data).to.equal(1)
        expect(circularDoublyLinkList.head.data).to.equal(4)
        expect(circularDoublyLinkList.toString()).to.equal('4,2,1')
        expect(circularDoublyLinkList.remove(1)).to.equal(1)
        expect(circularDoublyLinkList.toString()).to.equal('4,2')
        expect(circularDoublyLinkList.rear.data).to.equal(2)
        expect(circularDoublyLinkList.head.data).to.equal(4)
        expect(circularDoublyLinkList.removeHead()).to.equal(4)
        expect(circularDoublyLinkList.head.data).to.equal(2)
        expect(circularDoublyLinkList.rear.data).to.equal(2)
        expect(circularDoublyLinkList.removeHead()).to.equal(2)
        expect(circularDoublyLinkList.rear).to.equal(null)
    })

    it('检查删除尾部', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.removeRear()).to.equal(null)
        expect(circularDoublyLinkList.prepend(1)).to.equal(1)
        expect(circularDoublyLinkList.prepend(2)).to.equal(2)
        expect(circularDoublyLinkList.prepend(3)).to.equal(3)
        expect(circularDoublyLinkList.prepend(4)).to.equal(4)
        expect(circularDoublyLinkList.prepend(1)).to.equal(1)
        expect(circularDoublyLinkList.prepend(5)).to.equal(5)
        expect(circularDoublyLinkList.toString()).to.equal('5,1,4,3,2,1')
        expect(circularDoublyLinkList.remove(3)).to.equal(3)
        expect(circularDoublyLinkList.removeRear()).to.equal(1)
        expect(circularDoublyLinkList.rear.data).to.equal(2)
        expect(circularDoublyLinkList.head.data).to.equal(5)
        expect(circularDoublyLinkList.toString()).to.equal('5,1,4,2')
        expect(circularDoublyLinkList.removeRear()).to.equal(2)
        expect(circularDoublyLinkList.rear.data).to.equal(4)
        expect(circularDoublyLinkList.head.data).to.equal(5)
        expect(circularDoublyLinkList.toString()).to.equal('5,1,4')
        expect(circularDoublyLinkList.remove(1)).to.equal(1)
        expect(circularDoublyLinkList.toString()).to.equal('5,4')
        expect(circularDoublyLinkList.rear.data).to.equal(4)
        expect(circularDoublyLinkList.head.data).to.equal(5)
        expect(circularDoublyLinkList.removeRear()).to.equal(4)
        expect(circularDoublyLinkList.head.data).to.equal(5)
        expect(circularDoublyLinkList.rear.data).to.equal(5)
        expect(circularDoublyLinkList.removeRear()).to.equal(5)
        expect(circularDoublyLinkList.rear).to.equal(null)
    })

    it('检查删除指定元素', () => {
        const circularDoublyLinkList = new CircularDoublyLinkList()
        expect(circularDoublyLinkList.prepend(1)).to.equal(1)
        expect(circularDoublyLinkList.prepend(2)).to.equal(2)
        expect(circularDoublyLinkList.prepend(3)).to.equal(3)
        expect(circularDoublyLinkList.prepend(4)).to.equal(4)
        expect(circularDoublyLinkList.prepend(5)).to.equal(5)
        expect(circularDoublyLinkList.toString()).to.equal('5,4,3,2,1')
        expect(circularDoublyLinkList.remove(3)).to.equal(3)
        expect(circularDoublyLinkList.head.data).to.equal(5)
        expect(circularDoublyLinkList.rear.data).to.equal(1)
        expect(circularDoublyLinkList.toString()).to.equal('5,4,2,1')
        expect(circularDoublyLinkList.remove(5)).to.equal(5)
        expect(circularDoublyLinkList.head.data).to.equal(4)
        expect(circularDoublyLinkList.rear.data).to.equal(1)
        expect(circularDoublyLinkList.toString()).to.equal('4,2,1')
        expect(circularDoublyLinkList.remove(1)).to.equal(1)
        expect(circularDoublyLinkList.head.data).to.equal(4)
        expect(circularDoublyLinkList.rear.data).to.equal(2)
        expect(circularDoublyLinkList.toString()).to.equal('4,2')
        expect(circularDoublyLinkList.add(4, 3)).to.equal(3)
        expect(circularDoublyLinkList.toString()).to.equal('4,3,2')
        expect(circularDoublyLinkList.remove(3)).to.equal(3)
        expect(circularDoublyLinkList.head.data).to.equal(4)
        expect(circularDoublyLinkList.rear.data).to.equal(2)
        expect(circularDoublyLinkList.toString()).to.equal('4,2')
        expect(circularDoublyLinkList.remove(4)).to.equal(4)
        expect(circularDoublyLinkList.head.data).to.equal(2)
        expect(circularDoublyLinkList.rear.data).to.equal(2)
        expect(circularDoublyLinkList.remove(2)).to.equal(2)
        expect(circularDoublyLinkList.rear).to.equal(null)
        expect(circularDoublyLinkList.toString()).to.equal('')
    })

})
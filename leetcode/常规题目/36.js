/*
 * @Author: xiaohuolong
 * @Date: 2021-03-16 08:08:00
 * @LastEditors: xiaohuolong
 * @LastEditTime: 2021-04-16 13:30:07
 * @FilePath: /js-demo/leetcode/常规题目/36.js
 */
/**
 * @param {character[][]} board
 * @return {boolean}
    36. 有效的数独
        判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
        数字 1-9 在每一行只能出现一次。
        数字 1-9 在每一列只能出现一次。
        数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
        数独部分空格内已填入了数字，空白格用 '.' 表示。
    示例 1:
        输入:
        [
            ["5","3",".",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ]
        输出: true
    示例 2:
        输入:
        [
            ["8","3",".",".","7",".",".",".","."],
            ["6",".",".","1","9","5",".",".","."],
            [".","9","8",".",".",".",".","6","."],
            ["8",".",".",".","6",".",".",".","3"],
            ["4",".",".","8",".","3",".",".","1"],
            ["7",".",".",".","2",".",".",".","6"],
            [".","6",".",".",".",".","2","8","."],
            [".",".",".","4","1","9",".",".","5"],
            [".",".",".",".","8",".",".","7","9"]
        ]
        输出: false
        解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
            但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
    说明:
        一个有效的数独（部分已被填充）不一定是可解的。
        只需要根据以上规则，验证已经填入的数字是否有效即可。
        给定数独序列只包含数字 1-9 和字符 '.' 。
        给定数独永远是 9x9 形式的。
 */
var isValidSudoku = function(board) {
    let row = {}
    let column = {}
    let square = {}
    for (let i = 0; i < 9; i++) {
        row[i] = {}
        column[i] = {}
        square[i] = {}
    }
    for (let i = 0; i < board.length; i++) {
        const element = board[i];
        for (let j = 0; j < board[i].length; j++) {
            const num = board[i][j];
            const squareIndex = parseInt((i / 3)) * 3 + parseInt((j / 3))
            // console.log(squareIndex)
            if(num == '.')continue;
            if(square[squareIndex][num] || row[i][num] || column[j][num]) return false
            square[squareIndex][num] = true
            row[i][num] = true
            column[j][num] = true
            // console.log(rowNum, columnNum)
        }
    }
    // console.log(row)
    // console.log(column)
    // console.log(square)
    return true
};

var isValidSudoku = function(board){
    let row = {}
    let column = {}
    let square = {}
    let m = board.length
    let n = board.length
    for (let i = 0; i < m; i++) {
        column[i] = {}
        row[i] = {}
        square[i] = {}
    }
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            let num = board[i][j]
            if(num == '.') continue
            let index = parseInt(i / 3) * 3 + parseInt((j / 3))
            if(row[i][num] || column[j][num] || square[index][num]) return false
            row[i][num] = true
            column[j][num] = true
            square[index][num] = true
        }
    }
    // console.log(row, column, square)
    return true
}
console.log(isValidSudoku(
    [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
))
console.log(isValidSudoku(
    [
        ["8","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
))